import os
import ssl

import asyncpg


async def get_pg_pool():
    internal_url = os.getenv("DATABASE_URL")
    public_url = os.getenv("DATABASE_PUBLIC_URL")

    # ðŸ’– Create SSL context that skips cert verification for snuggly secure vibes
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    # ðŸŒ¸ Try internal URL with SSL verification disabled â€” fingers crossed! ðŸ¤ž
    try:
        print(
            f"[ðŸŒ¸ DB INFO] Trying internal URL with SSL verification disabled: {internal_url}"
        )
        return await asyncpg.create_pool(dsn=internal_url, ssl=ssl_context)
    except Exception as e:
        print(f"[ðŸ’” DB WARN] Internal URL failed to connect:\n  â†’ {e}")

    # ðŸ§¸ Fallback: Try public URL with SSL verification disabled â€” second chance sparkles âœ¨
    try:
        print(
            f"[ðŸ§¸ DB INFO] Trying public URL with SSL verification disabled: {public_url}"
        )
        return await asyncpg.create_pool(dsn=public_url, ssl=ssl_context)
    except Exception as e:
        print(f"[ðŸ’” DB WARN] Public URL failed to connect:\n  â†’ {e}")

    # ðŸŒ· Oops! Both attempts failed â€” time for some troubleshooting hugs! ðŸ¤—
    raise ConnectionError(
        "ðŸ’– Could not connect to either internal or public Postgres database. Sending you cozy vibes to fix this! ðŸ’–"
    )
